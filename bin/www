import http from 'http';
import debugLib from 'debug';
import app from '../src/app.js';
import { conectarBBDD } from '../src/config/db.config.js';
import dotenv from 'dotenv';

dotenv.config();

// Inicialización del módulo de depuración
const debug = debugLib('proyecto4-servidor-stock:server');

// Obtener el puerto desde las variables de entorno o usar 3000 por defecto
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Crear el servidor HTTP usando la aplicación Express
const server = http.createServer(app);

iniciarAplicacion();

// Función que inicia toda la aplicación: base de datos + servidor
async function iniciarAplicacion() {
  console.log('Iniciando conexión a la base de datos...');

  try {
    await conectarBBDD(process.env.MONGODB_CONNECT_URI || `mongodb://localhost:27017/miBBDD`);
    console.log('Base de datos conectada correctamente');

    console.log(`Levantando servidor en puerto ${port}...`);
    // Escuchar en el puerto definido
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (error) {
    console.error('Error al iniciar la aplicación:', error);
    process.exit(1); // Salida por error
  }
}

// Función para normalizar el valor del puerto (puede ser número o cadena)
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // Si no es número, puede ser un pipe nombrado
    return val;
  }

  if (port >= 0) {
    // Si es un número válido, se usa como puerto
    return port;
  }

  return false;
}

// Manejador de errores del servidor HTTP
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Puerto ' + port;

  // Manejo de errores comunes en la asignación de puertos
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requiere privilegios elevados`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} ya está en uso`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Manejador cuando el servidor comienza a escuchar exitosamente
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'Pipe ' + addr
    : 'Puerto ' + addr.port;
  debug(`Escuchando en ${bind}`);
}
